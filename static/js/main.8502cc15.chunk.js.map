{"version":3,"sources":["components/Name.js","components/ColorPicker.js","components/RefreshButton.js","components/WindowSize.js","components/Canvas.js","components/Paint.js","App.js","index.js"],"names":["React","memo","useState","name","setName","className","value","onChange","e","target","onClick","setSelectionRange","length","placeholder","ColorPicker","colors","activeColor","setActiveColor","map","color","i","key","type","checked","style","background","cb","title","useWindowSize","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","Canvas","props","drawing","setDrawing","canvasRef","useRef","ctx","current","getContext","width","height","stopDrawing","closePath","ref","onMouseDown","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","onMouseUp","onMouseOut","onMouseMove","coords","lineTo","stroke","handleMouseMove","Paint","setColors","getColors","baseColor","randomColor","slice","fetch","then","res","json","hex","visible","setVisible","timeoutId","clearTimeout","setTimeout","useCallback","headerRef","offsetHeight","borderTop","Name","marginTop","RefreshButton","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8502cc15.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// again this component is turned into a memo which means\r\n// if the own state doesn't change the component doesn't\r\n// have to rerender\r\nexport default React.memo(() => {\r\n  const [name, setName] = useState('');\r\n  return (\r\n    <label className = 'header-name'>\r\n      <input\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n        placeholder='Untitled'\r\n      />\r\n    </label>\r\n  )\r\n})","import React  from 'react';\r\n\r\nfunction ColorPicker({ colors = [], activeColor, setActiveColor}) {\r\n// if there are no colors in state, do nothing\r\n  if (!colors.length) return null;\r\n  return (\r\n    <fieldset className='color-picker'>\r\n      {colors.map((color, i) => (\r\n        <label key={i}>\r\n          <input\r\n            name='color'\r\n            type='radio'\r\n            value={color}\r\n            checked={activeColor === color}\r\n            onChange={() => setActiveColor(color)}\r\n          />\r\n          <span style = {{ background: color}} />\r\n        </label>\r\n      ))}\r\n    </fieldset>\r\n  )\r\n\r\n}\r\n\r\nexport default ColorPicker;","import React from 'react';\r\n\r\n// this is a component turned into a memo which optimizes the app\r\n// because we don't need to rerender the RefreshButton when the input\r\n// hasn't changed. In this case the cb stays the same so the component\r\n// doesn't rerender\r\nexport default React.memo(({ cb }) => {\r\n  return (\r\n    <button title='Refresh colors' className='button-refresh-colors' onClick={cb}>\r\n      &#8634;\r\n    </button>\r\n  )\r\n})\r\n\r\n","import { useState, useEffect } from 'react';\r\n\r\n// component WindowSize refactored into a hook useWindowSize\r\n// we simplify just to handle the size and extract the visibility logic out\r\n// also we don't want to return a <div> but just a data - [width, height]\r\n\r\nexport default function useWindowSize(cb) {\r\n  // this is array destructing - useState returns an array and a setter function\r\n  const [[windowWidth, windowHeight], setWindowSize] = useState([window.innerWidth, window.innerHeight]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      // when the user resizes the window, save in state new\r\n      // window width and height\r\n      if (cb) { cb() };\r\n      setWindowSize([window.innerWidth, window.innerHeight]);\r\n\r\n      // also we are calling the callback function cb passed from\r\n      // the parent component. Everytime the useEffect runs - when\r\n      // the user resizes the window, we call the cb function\r\n      // in this case it is the visibility handler\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    // useEffect can return a function for 'clean up'\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [cb])\r\n\r\n  // for our custom hook just return windowWidth and windowHeight\r\n  return [windowWidth, windowHeight]\r\n}\r\n\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport useWindowSize from './WindowSize';\r\n\r\n// check an error that Canvas rerenders (and the picture is gone)\r\n// the first time RefreshButton is clicked.\r\n// another bug - when resizing, the painting is gone\r\n// to fix this would require keeping persistent state\r\n// or maybe saving in local storage like here?\r\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\r\n\r\nexport default function Canvas (props) {\r\n\r\n  const [drawing, setDrawing] = useState(false);\r\n  const canvasRef = useRef();\r\n  // Normally in React you donâ€™t need a ref to update something,\r\n  // but the canvas is not like other DOM elements. Most DOM elements\r\n  // have a property like value that you can update directly.\r\n  // The canvas works with a context (ctx in our app) that allows you\r\n  // to draw things. For that we have to use a ref, which is a reference\r\n  // to the actual canvas DOM element.\r\n  //\r\n\r\n  const ctx = useRef();\r\n  useEffect(() => {\r\n    ctx.current = canvasRef.current.getContext('2d')\r\n  }, []);\r\n\r\n  const [width, height] = useWindowSize();\r\n\r\n  function handleMouseMove(e) {\r\n    // actual coordinates\r\n    const coords = [\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    ]\r\n    if (drawing) {\r\n      ctx.current.lineTo(...coords)\r\n      ctx.current.stroke()\r\n    }\r\n    if (props.handleMouseMove) {\r\n        props.handleMouseMove(...coords)\r\n    }\r\n  }\r\n\r\n  function startDrawing(e) {\r\n    ctx.current.lineJoin = 'round'\r\n    ctx.current.lineCap = 'round'\r\n    ctx.current.lineWidth = 10\r\n    ctx.current.strokeStyle = props.color\r\n    ctx.current.beginPath();\r\n    // actual coordinates\r\n    ctx.current.moveTo(\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    )\r\n    setDrawing(true);\r\n  }\r\n\r\n  function stopDrawing() {\r\n    ctx.current.closePath()\r\n    setDrawing(false)\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={height}\r\n      onMouseDown={startDrawing}\r\n      onMouseUp={stopDrawing}\r\n      onMouseOut={stopDrawing}\r\n      onMouseMove={handleMouseMove}\r\n    />\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Name from './Name';\r\nimport randomColor from 'randomcolor';\r\nimport ColorPicker from './ColorPicker';\r\nimport RefreshButton from './RefreshButton';\r\nimport Canvas from './Canvas';\r\nimport useWindowSize from './WindowSize';\r\n\r\nfunction Paint() {\r\n  // to optimize the app we can use useCallback with\r\n  // React.memo -> see RefreshButton component\r\n\r\n  // set the initial state\r\n  const [colors, setColors] = useState([]);\r\n  const [activeColor, setActiveColor] = useState(null);\r\n\r\n  const getColors = () => {\r\n    // using function from 'randomcolor'  library to get the first color\r\n    const baseColor = randomColor().slice(1);\r\n\r\n    // get array of colors based on baseColor from api\r\n    fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setColors(res.colors.map(color => color.hex.value))\r\n      setActiveColor(res.colors[0].hex.value)\r\n    })\r\n  }\r\n  // this useEffect runs only once - at the first render\r\n  // because the array of dependencies is empty\r\n  // so when the Paint component renders, we call getColors\r\n  // it is similar to ComponentDidMount()\r\n  useEffect(getColors, []);\r\n\r\n  // set the initial state whether or not the windows size is visible\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  // calling the custom hook to get the window size\r\n  // we can pass a function to this hook\r\n  // which can handle the visibility\r\n  // we also use useRef hook to keep the timeoutID because\r\n  // it stays the same between renders\r\n  let timeoutId = useRef();\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setVisible(true);\r\n    clearTimeout(timeoutId.current);\r\n    // after resize - for 0.5sec set the window size to visible\r\n    timeoutId.current = setTimeout(() => setVisible(false), 500);\r\n  });\r\n\r\n  // here we define a callback that is passed to the RefreshButton\r\n  const cb = useCallback(getColors, []);\r\n\r\n  // here we define a ref to store the value - height of the header\r\n  // which is later used to compute the real height of the Canvas\r\n  // substracting the header height\r\n  const headerRef = useRef( {offsetHeight: 0} );\r\n// console.log('render Paint');\r\n  return (\r\n    <div className='app'>\r\n      <header ref={headerRef} style={{ borderTop: `10px solid ${activeColor}` }} >\r\n        <div className='app'>\r\n          <Name />\r\n        </div>\r\n        <div style={{ marginTop: 10}}>\r\n          <ColorPicker\r\n            colors={colors}\r\n            activeColor={activeColor}\r\n            setActiveColor={setActiveColor}\r\n          />\r\n          <RefreshButton cb={cb} />\r\n        </div>\r\n      </header>\r\n      {activeColor && (\r\n        <Canvas\r\n          color={activeColor}\r\n        />\r\n      )}\r\n      <div className={`window-size ${visible ? '' : 'hidden'}`}>\r\n        {windowWidth} x {windowHeight}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Paint;","import React from 'react';\nimport Paint from './components/Paint';\n\nfunction App() {\n  return (\n    <Paint />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}